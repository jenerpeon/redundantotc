#!/bin/bash
MASTER=""
SLAVE=""
U_SLAVE=""
U_MASTER=""
SSH_KEY="~/.ssh/id_rsa.pub"

key="$1"

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White
NC='\033[0m'


myLogger () {
local head='%-10s%-25s%-35s'
    case $1 in
    1)
        head="${head}${Red}%8s${NC}\n"
        printf $head "ERROR:" "func: $2" "expr: $3" "[failed]"
        shift
        ;;
    2)
        head="${head}${Yellow}%8s${NC}\n"
        printf $head "WARNING:" "func: $2" "expr: $3" "[warn]"
        shift
        ;;
    3)
        head="${head}${Yellow}%8s${NC}\n"
        printf $head "INFO:" "func: $2" "expr: $3" "[debug]"
        shift
        ;;
    4)
        head="${head}${Green}%8s${NC}\n"
        printf $head "OK:" "func: $2" "expr: $3" "[OK]"
        shift
        ;;
    *)
        printf "log level not defined"
    ;;
    esac
}

check () {
   case $1 in
   -f)
     if [ $2 -ne 0 ]; then
         myLogger "1" "$3" "$4"
     else
         myLogger "4" "$3" "$4"
     fi;
     shift
     ;;
    --cf)
     if [ $2 -ne 0 ]; then
         myLogger "1" "$3" "$4"
         exit 1
     else
         myLogger "4" "$3" "$4"
     fi;
     shift
     ;;
   -e)
     if [ -e $2 ]; then
         myLogger "1" "$3" "$4" 
     else
         myLogger "4" "$3" "$4"
     fi;
     shift
     ;;  
   --enc)
     [ ! -e $2 ] && myLogger "2" "$3" "$4" \
     || myLogger "4" "$3" "$4"
     shift
     ;;
   *)     
     printf "not implementet yet\n"
     ;; 
   esac
} 

test_con () {
  for run in {1 .. 5} 
  do
    if ping -q -c 1 -W 1 $TARGET >/dev/null; then
      myLogger "4" "test_con" "connection"
      break
    else
      myLogger "2" "test_con" "try $run"
    fi;
      myLogger "1" "test_con" "connection"
      exit 1
  done
}

      
init_ssh () {
    for i in "${U_MASTER}@${MASTER}" "${U_SLAVE}@${SLAVE}"; do 
        #copy your own key to allow access to the servers
        ssh -q $i \
            "[[ ! -f /home/vagrant/.ssh/authorized_keys ]] \
            && touch ~/.ssh/authorized_keys"
        cat $SSH_KEY | ssh $i "cat >> ~/.ssh/authorized_keys"  
        cat $SSH_KEY | ssh -q $i "sudo bash -c \"cat >> /root/.ssh/authorized_keys\""
        check -f $? "init_ssh" "key authorized"
        #lookup if root keys exist.
        ssh $i \
            "[[ -f /home/vagrant/.ssh/id_rsa.pub ]]"
        check --cf $? "init_ssh" "${i} key"
        #copy root key
    done
}
    
install_slave () {
    rsync -Ral Slave 'root@'${SLAVE}:/opt/
    check -f $? "install_slave" "rsync"
}

install_master () {
    rsync -Ral Master 'root@'${MASTER}:/opt/
    check -f $? "install_master" "rsync"
}

while [[ $# > 1 ]]
do
    key="$1"

    case $key in
        -h|--help)
            echo -e "synopsis: install File [option]"
            shift
        ;;
        -i|--init)
            init_ssh $2
            shift
        ;;
        --key)
            eval "SSH_KEY=$2"
            shift
        ;;
        --umaster)
            eval "U_MASTER=$2"
            shift
        ;;
        --uslave)
            eval "U_SLAVE=$2"
            shift
        ;;
        --ipmaster)
            eval "MASTER=$2"
            shift
        ;;
        --ipslave)
            eval "SLAVE=$2"
            shift
        ;;
        *)
            echo "parameter not known. -h | --help for manual"
        ;;
    esac
    shift
done

init_ssh
install_slave
install_master
